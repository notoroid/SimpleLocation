
サンプルプログラム:
SimpleLocation (シンプル・ロケーション)

							作成者:能登 要
							作成日:2012/7/8
■概要:
このプロジェクトは比較的小規模なサービスにおいて位置情報を提供するためのiOS側の実装サンプルです。各種プロジェクトに柔軟に対応するため、本来実装すべき点がいくつか不足しています。不足点は後述します。

本プロジェクトでは、サーバ側実装は用意されてません。代わりにサーバー側で実装すべきメソッドについて後述します。

本プロジェクトは簡潔さを求めるため、iOS5 SDK以降、Storyboard、AdvanceReferenceCounter(ARC) の各種テクノロジを用いています。iOS4 SDK以前、InterfaceBuilder の使用したプロジェクト、ARC を無効にしたプロジェクトについてはこれらを解析し実装しなおす必要があるので奨励しません。

■1) 語彙
JSON(JSON ジェーソン)
データ記述言語。JavaScript のデータ記述に類似。

latitude (ラティチュード)
緯度。

longitude (ロンギチュード)
経度

chek-in (チェックイン)
位置情報サービスでは特定位置情報に対して、ユーザがいたことをほかのユーザに示す行為をしめすことがあります。

session (セッション)
本文章では、インタネットにおけるセッション管理と同意になります。


■2) 不足点
本プロジェクトには、ログインに認証が実装されていません。実際に利用する際には、対象とするサービス(自作、自社サービスもしくは各種サービス)のログイン機能を使用し、当位置情報サービスを実装するようにしてください。

具体的には、自作、自社サービスの場合は、セッションを用いたユーザ識別。Twitter では、Twitter のサーバと、位置情報サービスを運用するサーバ間での認証などを用いてください。

本プロジェクトでは、インターネット非接続時の処理が実装されていません。この実装は、Apple より優秀なサンプルコード(Reachability)が用意されていますので。こちらを参考ないしご利用ください。

本アプリでは通知機能を実装していません。通知機能が必要な場合は別途プロジェクトを参考にしてください。

■3) サーバ側実装 
本ソースコードではサーバ側のコードは提供されていません。代わりに仕様を簡潔に明記します。

3-1) 実装するAPI
本サンプルで利用するAPI は以下となります。すべてPOSTメソッドでやり取りします。文字列はUTF-8 を返すことを前提として記述します。


3-2)失敗時の戻り値
失敗時の戻り値は定型のエラーメッセージを返します、エラーメッセージから不具合の原因を調査することが可能となります。

・書式
	{
		"status":"failed"
		"errorcode":数値エラー情報;
		"description":文字列エラーの詳細情報
	}


3-3) 場所検索 メソッド [SearchPlace]
緯度経度の範囲から位置情報を検索します。

・API種類
POSTメソッド

・書式
[位置情報のルート]/checkin.php?action=searchPlace&latbegin=[緯度開始]&latgend[緯度終了]&longbegin=[経度度開始]&longend=[経度終了]

[緯度開始] := 数値緯度開始;
[緯度終了] := 数値緯度終了;
[経度度開始] := 数値経度度開始;
[経度終了] := 数値経度終了;

・概要
位置情報を緯度経度の開始位置から求めます。

・戻り値
JSON形式で値を返します。places に指定した範囲の情報を取得できます。

	{
		"status":'succeeded';
		"places":[位置情報*]
		"latmin":[緯度の最小値]
		"latmax":[緯度の最大値]
		"longmin":[経度の最小値]
		"longman":[経度の最大値]
	}

[位置情報] := {		"parameters":[位置の詳細情報]
			"placeid":文字列位置ID
			"lat":数値緯度
			"long":数値経度
			"createdate":
		}

[位置の詳細情報] := {	"name":文字列なまえ
			"kana":文字列かな
			"address":文字列住所
			"address2":文字列住所2
			"address3":文字列住所3
			}

3-4) 位置情報の更新 [Update]
位置情報を新しく登録します。

・書式
[位置情報のルート]/checkin.php?action=update&latitude=[数値緯度]&longitude=[数値経度]&json=[文字列詳細情報]

文字列の詳細情報は、JSONで記述された3-3 の戻り値内の[位置の詳細情報]をエスケープしたものを渡します、

・戻り値
更新された内容のうち詳細情報が戻り値として帰ります。

{
	"status":'succeeded';
	"json":[位置の詳細情報]
}

3-5) チェックイン [Checkin]
指定された位置にユーザIDでチェックインします。

・書式
[位置情報のルート]/checkin.php?action=checkin&latitude=[数値緯度情報]&longitude=[数値経度情報]&placeid=[文字列位置ID]&userid=[文字列ユーザーID]&json=[文字列チェックイン詳細情報]"

・戻り値
	{
		 "status":"succeeded"
		,"checkinid":[文字列チェックインID]
	}

ユーザ名でチェックインします。チェックインしたユーザが正規ユーザかの判定はサービスごとに実装します。本バージョンではチェックイン詳細情報については何も定義されていません。

3-6) チェックイン済みユーザ検索 
場所にチェックインしたユーザの一覧を表示します。一覧は新しいチェックインが先頭になります。

checkin.php?action=searchCheckin&placeid=[文字列位置ID]

もしくは、

checkin.php?action=searchCheckin&placeid=[文字列位置ID]&lastupdate=[整数最終更新日]

です。最終更新日の値は1970年を0としたC言語時間を使用します。最終更新日を指定できる呼び出しでは、指定した日数よりも新しいチェックイン済み情報を取得可能です。

・) 戻り値

	{
		"'status":'succeeded'
		,"checkins":[チェックインユーザ情報*]
	}
	
	チェックインユーザ情報 := {
		"parameters":[チェックイン詳細情報]
		,"placeid":[文字列検索対象の位置情報ID]
		,"lat":[数値緯度]
		,"long":[数値経度]
		,"userid":[文字列ユーザーID]
		,"lastupdate":[整数更新日]
	}

	チェックイン詳細情報 *= { }


チェックイン詳細情報は2012/7/8現在何も含まれていません。位置情報に付加する情報(何をしているか等) が追加された場合変更があるかもしれません。





								以上です。

